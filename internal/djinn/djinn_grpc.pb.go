// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package djinn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConversationMagnifierClient is the client API for ConversationMagnifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationMagnifierClient interface {
	Magnify(ctx context.Context, opts ...grpc.CallOption) (ConversationMagnifier_MagnifyClient, error)
}

type conversationMagnifierClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationMagnifierClient(cc grpc.ClientConnInterface) ConversationMagnifierClient {
	return &conversationMagnifierClient{cc}
}

func (c *conversationMagnifierClient) Magnify(ctx context.Context, opts ...grpc.CallOption) (ConversationMagnifier_MagnifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConversationMagnifier_ServiceDesc.Streams[0], "/langame.djinn.ConversationMagnifier/Magnify", opts...)
	if err != nil {
		return nil, err
	}
	x := &conversationMagnifierMagnifyClient{stream}
	return x, nil
}

type ConversationMagnifier_MagnifyClient interface {
	Send(*MagnificationRequest) error
	Recv() (*MagnificationResponse, error)
	grpc.ClientStream
}

type conversationMagnifierMagnifyClient struct {
	grpc.ClientStream
}

func (x *conversationMagnifierMagnifyClient) Send(m *MagnificationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conversationMagnifierMagnifyClient) Recv() (*MagnificationResponse, error) {
	m := new(MagnificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConversationMagnifierServer is the server API for ConversationMagnifier service.
// All implementations must embed UnimplementedConversationMagnifierServer
// for forward compatibility
type ConversationMagnifierServer interface {
	Magnify(ConversationMagnifier_MagnifyServer) error
	mustEmbedUnimplementedConversationMagnifierServer()
}

// UnimplementedConversationMagnifierServer must be embedded to have forward compatible implementations.
type UnimplementedConversationMagnifierServer struct {
}

func (UnimplementedConversationMagnifierServer) Magnify(ConversationMagnifier_MagnifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Magnify not implemented")
}
func (UnimplementedConversationMagnifierServer) mustEmbedUnimplementedConversationMagnifierServer() {}

// UnsafeConversationMagnifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationMagnifierServer will
// result in compilation errors.
type UnsafeConversationMagnifierServer interface {
	mustEmbedUnimplementedConversationMagnifierServer()
}

func RegisterConversationMagnifierServer(s grpc.ServiceRegistrar, srv ConversationMagnifierServer) {
	s.RegisterService(&ConversationMagnifier_ServiceDesc, srv)
}

func _ConversationMagnifier_Magnify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConversationMagnifierServer).Magnify(&conversationMagnifierMagnifyServer{stream})
}

type ConversationMagnifier_MagnifyServer interface {
	Send(*MagnificationResponse) error
	Recv() (*MagnificationRequest, error)
	grpc.ServerStream
}

type conversationMagnifierMagnifyServer struct {
	grpc.ServerStream
}

func (x *conversationMagnifierMagnifyServer) Send(m *MagnificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conversationMagnifierMagnifyServer) Recv() (*MagnificationRequest, error) {
	m := new(MagnificationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConversationMagnifier_ServiceDesc is the grpc.ServiceDesc for ConversationMagnifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationMagnifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "langame.djinn.ConversationMagnifier",
	HandlerType: (*ConversationMagnifierServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Magnify",
			Handler:       _ConversationMagnifier_Magnify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "djinn.proto",
}
